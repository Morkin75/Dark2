/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dark;

import static dark.Dark.ventanaInicio;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JComboBox;

/**
 *
 * @author manueljesusgarcialopez
 */
public class Ordenes extends javax.swing.JPanel {

    //Creamos un panel con los Botones para mover
    public Mover mover;
    
    //Variable para almacenar los puntos de movimiento del PJ
    public int movi;
    
    //Variable para almacenar la posicion del PJ
    int posPJx;
    int posPJy;
    
    //VARIABLES PARA ALMACENAR LA POSICION DESTINO DEL PJ(En caso de que mueva)
    int posPJxFinal;
    int posPJyFinal;
    //Variable que almacena el codigo del mapa con las posibles salidas de movimiento
    int codPJ;
    
    //ArrayList que almacena la ruta
    public ArrayList<String> ruta = new ArrayList<>();
    public ArrayList<String> ruta2 = new ArrayList<>();
    
    public ArrayList<Integer> casillasMovidas = new ArrayList<>();
    
    public ArrayList<ArrayList<String>> rutas = new ArrayList<>();
    
    boolean rutaCalculada;
    
    SubOrdenes subOrden;
    /**
     * Creates new form Ordenes
     */
    public Ordenes() {
        initComponents();
        
        //Submenu para mover PJs
        //mover = new Mover();
        //mover.setBounds(76, 40, 240, 86);
        
        //this.jPestania1.add(mover);
        //System.out.println("ES VISIBLE? "+mover.isVisible());
        
        subOrden = new SubOrdenes();
        rutaCalculada = true;
        
        ruta.clear();
        ruta2.clear();
        rutas.clear();
        casillasMovidas.clear();
        
        //System.out.println("POSICION: " + this.getComponentZOrder(jPestania4));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPestania1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButtonOrdenar1 = new javax.swing.JButton();
        jButtonCancelar1 = new javax.swing.JButton();
        jComboBox1_1 = new javax.swing.JComboBox<>();
        jPestania2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButtonOrdenar2 = new javax.swing.JButton();
        jButtonCancelar2 = new javax.swing.JButton();
        jPestania3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jButtonOrdenar3 = new javax.swing.JButton();
        jButtonCancelar3 = new javax.swing.JButton();
        jPestania4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setForeground(new java.awt.Color(102, 0, 255));
        setPreferredSize(new java.awt.Dimension(400, 234));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 255), new java.awt.Color(153, 153, 0)));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAlignmentX(1.0F);
        jTabbedPane1.setAlignmentY(1.0F);
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(400, 234));

        jLabel1.setText("Acción:");

        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("          ");

        jButtonOrdenar1.setText("Ordenar");
        jButtonOrdenar1.setEnabled(false);
        jButtonOrdenar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenar1ActionPerformed(evt);
            }
        });

        jButtonCancelar1.setText("Cancelar");
        jButtonCancelar1.setEnabled(false);
        jButtonCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelar1ActionPerformed(evt);
            }
        });

        jComboBox1_1.setEnabled(false);
        jComboBox1_1.setMinimumSize(new java.awt.Dimension(100, 27));
        jComboBox1_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1_1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPestania1Layout = new javax.swing.GroupLayout(jPestania1);
        jPestania1.setLayout(jPestania1Layout);
        jPestania1Layout.setHorizontalGroup(
            jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania1Layout.createSequentialGroup()
                .addGroup(jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPestania1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addComponent(jButtonCancelar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOrdenar1))
                    .addGroup(jPestania1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, 284, Short.MAX_VALUE)
                            .addGroup(jPestania1Layout.createSequentialGroup()
                                .addComponent(jComboBox1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPestania1Layout.setVerticalGroup(
            jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPestania1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOrdenar1)
                        .addComponent(jButtonCancelar1))))
        );

        jLabel1.getAccessibleContext().setAccessibleName("jLabel1");

        jTabbedPane1.addTab("Acción 1", jPestania1);

        jLabel2.setText("Acción:");

        jComboBox2.setEnabled(false);

        jLabel6.setText("          ");

        jButtonOrdenar2.setText("Ordenar");
        jButtonOrdenar2.setEnabled(false);
        jButtonOrdenar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenar2ActionPerformed(evt);
            }
        });

        jButtonCancelar2.setText("Cancelar");
        jButtonCancelar2.setEnabled(false);
        jButtonCancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPestania2Layout = new javax.swing.GroupLayout(jPestania2);
        jPestania2.setLayout(jPestania2Layout);
        jPestania2Layout.setHorizontalGroup(
            jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania2Layout.createSequentialGroup()
                .addGroup(jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPestania2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPestania2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCancelar2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOrdenar2)))
                .addContainerGap())
        );
        jPestania2Layout.setVerticalGroup(
            jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPestania2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOrdenar2)
                        .addComponent(jButtonCancelar2))))
        );

        jLabel2.getAccessibleContext().setAccessibleName("jLabel2");

        jTabbedPane1.addTab("Acción 2", jPestania2);

        jLabel3.setText("Acción:");

        jComboBox3.setEnabled(false);

        jLabel7.setText("          ");

        jButtonOrdenar3.setText("Ordenar");
        jButtonOrdenar3.setEnabled(false);
        jButtonOrdenar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenar3ActionPerformed(evt);
            }
        });

        jButtonCancelar3.setText("Cancelar");
        jButtonCancelar3.setEnabled(false);
        jButtonCancelar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelar3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPestania3Layout = new javax.swing.GroupLayout(jPestania3);
        jPestania3.setLayout(jPestania3Layout);
        jPestania3Layout.setHorizontalGroup(
            jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania3Layout.createSequentialGroup()
                .addGroup(jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPestania3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox3, 0, 284, Short.MAX_VALUE))
                    .addGroup(jPestania3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonCancelar3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOrdenar3)))
                .addContainerGap())
        );
        jPestania3Layout.setVerticalGroup(
            jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPestania3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOrdenar3)
                        .addComponent(jButtonCancelar3))))
        );

        jTabbedPane1.addTab("Acción 3", jPestania3);

        jLabel4.setText("          ");

        javax.swing.GroupLayout jPestania4Layout = new javax.swing.GroupLayout(jPestania4);
        jPestania4.setLayout(jPestania4Layout);
        jPestania4Layout.setHorizontalGroup(
            jPestania4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPestania4Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 321, Short.MAX_VALUE))
        );
        jPestania4Layout.setVerticalGroup(
            jPestania4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPestania4Layout.createSequentialGroup()
                .addGap(0, 154, Short.MAX_VALUE)
                .addComponent(jLabel4))
        );

        jTabbedPane1.addTab("Información", jPestania4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
        
      
    private void jButtonOrdenar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenar2ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox2.setEnabled(false);
        //Guardamos la acción seleccionada en el combobox
        int idAccion = Dark.ventanaInicio.ordenes.jComboBox2.getSelectedIndex();
        //Guardamos la acción en el ArrayList de las acciones
        int posicion = Dark.ventanaInicio.PJ;
        System.out.println("Posicion para List: " + posicion);
        //Guardamos la orden
        EnviarOrdenes orden2; //Creamos una instancia
        //Recuperamos los valores de las ordenes de ese PJ
        orden2 = Dark.ventanaInicio.ordenesPJ.get(posicion);
        //Asignamos el nuevo valor de la accion selecciona en el objeto
        orden2.accion2 = idAccion;
        System.out.println("Orden para List: " + orden2.accion2);
        //Almacenamos el objeto en el ArrayList
        Dark.ventanaInicio.ordenesPJ.set(posicion, orden2);
        //Ponemos los botones en orden
        jButtonOrdenar2.setEnabled(false);
        jButtonCancelar2.setEnabled(true);
    }//GEN-LAST:event_jButtonOrdenar2ActionPerformed

    private void jButtonOrdenar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenar3ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox3.setEnabled(false);
        //Guardamos la acción seleccionada en el combobox
        int idAccion = Dark.ventanaInicio.ordenes.jComboBox3.getSelectedIndex();
        //Guardamos la acción en el ArrayList de las acciones
        int posicion = Dark.ventanaInicio.PJ;
        System.out.println("Posicion para List: " + posicion);
        //Guardamos la orden
        EnviarOrdenes orden3; //Creamos una instancia
        //Recuperamos los valores de las ordenes de ese PJ
        orden3 = Dark.ventanaInicio.ordenesPJ.get(posicion);
        //Asignamos el nuevo valor de la accion selecciona en el objeto
        orden3.accion3 = idAccion;
        System.out.println("Orden para List: " + orden3.accion3);
        //Almacenamos el objeto en el ArrayList
        Dark.ventanaInicio.ordenesPJ.set(posicion, orden3);
        //Ponemos los botones en orden
        jButtonOrdenar3.setEnabled(false);
        jButtonCancelar3.setEnabled(true);
    }//GEN-LAST:event_jButtonOrdenar3ActionPerformed

    private void jButtonCancelar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelar1ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox1.setEnabled(true);
        jComboBox1_1.setEnabled(true);
        //Ponemos los botones en orden
        jButtonOrdenar1.setEnabled(true);
        jButtonCancelar1.setEnabled(false);
        ruta2.clear();
        rutas.clear();
    }//GEN-LAST:event_jButtonCancelar1ActionPerformed

    private void jButtonCancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelar2ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox2.setEnabled(true);
        //Ponemos los botones en orden
        jButtonOrdenar2.setEnabled(true);
        jButtonCancelar2.setEnabled(false);
    }//GEN-LAST:event_jButtonCancelar2ActionPerformed

    private void jButtonCancelar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelar3ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox3.setEnabled(true);
        //Ponemos los botones en orden
        jButtonOrdenar3.setEnabled(true);
        jButtonCancelar3.setEnabled(false);
    }//GEN-LAST:event_jButtonCancelar3ActionPerformed

    private void jButtonOrdenar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenar1ActionPerformed
        //desactivamos la acción, se queda como marcada...
        jComboBox1.setEnabled(false);
        jComboBox1_1.setEnabled(false);
        //Guardamos la acción seleccionada en el combobox
        int idAccion = Dark.ventanaInicio.ordenes.jComboBox1.getSelectedIndex();
        //Guardamos la acción en el ArrayList de las acciones
        int posicion = Dark.ventanaInicio.PJ;
        //Guardamos la orden
        EnviarOrdenes orden1; //Creamos una instancia
        //Recuperamos los valores de las ordenes de ese PJ
        orden1 = Dark.ventanaInicio.ordenesPJ.get(posicion);
        //Asignamos el nuevo valor de la accion selecciona en el objeto
        orden1.accion1 = idAccion;
        //System.out.println("Orden para List: " + orden1.accion1);
        //Almacenamos el objeto en el ArrayList
        Dark.ventanaInicio.ordenesPJ.set(posicion, orden1);
        //Almacenamos la suborden. Aquí tenemos que ver la orden, en funcion de esta irán unos parámetros u otros
        System.out.println("SE HA GUARDADO EN LA CLASE LA ACCION: " + orden1.accion1);
        String casilla = "";
        String[] partes;
        String parte1 = "";
        String parte2 = "";
        switch(orden1.accion1) {
            case 0: //El PJ se va a mover
                casilla = jComboBox1_1.getItemAt(jComboBox1_1.getSelectedIndex()); //Guardamos las casillas
                partes = casilla.split("-"); //Dividimos el String para obtener la X y la Y
                parte1 = partes[0]; 
                parte2 = partes[1];    
                subOrden.setCasillaX(Integer.valueOf(parte1)); //Indicamos la posición a la que se mueve
                subOrden.setCasillaY(Integer.valueOf(parte2)); //Guardando la X y la Y en la clase
                subOrden.setIdPJ(codPJ); //Guardamos siempre el ID del PJ
                subOrden.setAccion(idAccion); //Y guardamos también la acción
                
                Dark.ventanaInicio.subOrdenes.add(subOrden); //Y ahora metemos el objeto en su ArrayList correspondiente
                
                posPJxFinal = Dark.ventanaInicio.subOrdenes.get(0).getCasillaX();
                posPJyFinal = Dark.ventanaInicio.subOrdenes.get(0).getCasillaY();
                                
                System.out.println("SE HA GUARDADO EN LA CLASE la Coordenada X: " + posPJxFinal);
                System.out.println("SE HA GUARDADO EN LA CLASE la Coordenada Y: " + posPJyFinal);
                
                //Calculamos la ruta
                //ruta.clear();
                calculaRuta();
                //calcularRuta();
                //calcularRuta2(Integer.valueOf(parte1), Integer.valueOf(parte2), codPJ);
                for(int h=0; h<rutas.size(); h++)
                    System.out.println(rutas.get(h));
                
                break; //Se dejan en blanco los campos no necesarios
            case 1: //El PJ va a seguir a alguien
                //casilla = jComboBox1_1.getItemAt(jComboBox1_1.getSelectedIndex()); //Guardamos las casillas
                //partes = casilla.split("-"); //Dividimos el String para obtener la X y la Y
                //parte1 = partes[0]; 
                //parte2 = partes[1];    
                //subOrden.setCasillaX(Integer.valueOf(parte1)); //Indicamos la posición a la que se mueve
                //subOrden.setCasillaY(Integer.valueOf(parte2)); //Guardando la X y la Y en la clase
                subOrden.setIdPJ(codPJ); //Guardamos siempre el ID del PJ
                subOrden.setAccion(idAccion); //Y guardamos también la acción
                
                Dark.ventanaInicio.subOrdenes.add(subOrden); //Y ahora metemos el objeto en su ArrayList correspondiente
                
                break; //Se dejan en blanco los campos no necesarios
            default:
                break;
        }
        
        //Ponemos los botones en orden
        jButtonOrdenar1.setEnabled(false);
        jButtonCancelar1.setEnabled(true);
    }//GEN-LAST:event_jButtonOrdenar1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //Preguntamos por la acción seleccionada para actuar en consecuencia
        if(jComboBox1.getSelectedIndex() == 0) {
            ventanaInicio.ordenes.jComboBox1_1.setVisible(true);
            ventanaInicio.ordenes.jComboBox1_1.setEnabled(true);
            //Eliminamos los datos anteriores
            jComboBox1_1.removeAllItems();
            cargarMenuEscogerLugar();
        } else {           
            ventanaInicio.ordenes.jComboBox1_1.setVisible(false);
            ventanaInicio.ordenes.jComboBox1_1.setEnabled(false);
            cargarMenuEscogerEnemigo();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1_1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1_1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButtonCancelar1;
    public javax.swing.JButton jButtonCancelar2;
    public javax.swing.JButton jButtonCancelar3;
    public javax.swing.JButton jButtonOrdenar1;
    public javax.swing.JButton jButtonOrdenar2;
    public javax.swing.JButton jButtonOrdenar3;
    public javax.swing.JComboBox<String> jComboBox1;
    public javax.swing.JComboBox<String> jComboBox1_1;
    public javax.swing.JComboBox<String> jComboBox2;
    public javax.swing.JComboBox<String> jComboBox3;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JPanel jPestania1;
    public javax.swing.JPanel jPestania2;
    public javax.swing.JPanel jPestania3;
    public javax.swing.JPanel jPestania4;
    public javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    //Método que carga los comboBox de las órdenes o acciones del juego
    public void cargarMenu() {
        
        //System.out.println("CC:" + ventanaInicio.jTable5.getComponentCount());
        //Vemos el numero de componentes de las acciones
        int n_acciones = ventanaInicio.jTable5.getRowCount();
        try {
            
            //Cargamos los combos de las acciones de los PJs
            System.out.println("COMPOS: " + ventanaInicio.jTable5.getValueAt(1, 2));
            for(int x=0; x<n_acciones;x++) {
                jComboBox1.addItem((String) ventanaInicio.jTable5.getValueAt(x, 1));
                jComboBox2.addItem((String) ventanaInicio.jTable5.getValueAt(x, 1));
                jComboBox3.addItem((String) ventanaInicio.jTable5.getValueAt(x, 1));
            }
        } catch (NullPointerException ex) {
            System.out.println("Esta excepcion: " + ex.getMessage() + ex.getLocalizedMessage());
        }
    }
    public void cargarMenuEscogerLugar() {
        //Posiciones del PJ escogido - Vemos en el ArrayList la posición del PJ
        posPJx = Dark.ventanaInicio.personajesBando1.get(Dark.ventanaInicio.PJ).getPosX();
        posPJy = Dark.ventanaInicio.personajesBando1.get(Dark.ventanaInicio.PJ).getPosY();
        
        //jComboBoxElegirCoor.setLocation(new java.awt.Point(150, 80));
        //Guardamos el movimiento en una variable para tener un acceso más rápido
        movi = Dark.ventanaInicio.personajesBando1.get(Dark.ventanaInicio.PJ).getMov();
        /*try {
            //Cargamos el combo con las casillas a las que puede acceder el PJ
            //Primero recorremos el bucle - Dependerá de las casillas de movimiento del PJ
            for(int x=posPJx-movi; x<posPJx+movi+1;x++) {
                for(int y=posPJy-movi; y<posPJy+movi+1;y++) {
                    //Vamos a comprobar si la casilla está disponible
                    movimientoN1();
                    jComboBox1_1.addItem((String) (x + "-" + y));
                }
            }
        } catch (NullPointerException ex) {
            
        }*/
        codPJ = Constantes.mapaConCaminos[posPJx][posPJy];
        //Vamos a prescindir del bucle. Preguntamos por el código de la casilla del PJ
        System.out.println("MUESTRA CODPJ: " + codPJ);
        System.out.println("Primeras coordenadas: " + posPJx + ":::" + posPJy);
        //moverADireccion(Constantes.mapaConCaminos[posPJx][posPJy], 0, posPJx, posPJy);
        Dark.ventanaInicio.mapaFondo.limpiarMapa();
        ruta.clear();
        switch(codPJ) {
            case 1:
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                break;
            case 2:
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 3:
                ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                break;
            case 4:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                break;
            case 5:
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 6:
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                break;
            case 7:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);                
                break;
            case 8:
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 9:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 10:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                break;
            case 11:
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 12:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
            case 13:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                //ruta.add("Sur");
                irSur(codPJ, movi, posPJx, posPJy);
                break;
            case 14:
                //ruta.add("Oeste");
                irOeste(codPJ, movi, posPJx, posPJy);
                //ruta.add("Norte");
                irNorte(codPJ, movi, posPJx, posPJy);
                //ruta.add("Este");
                irEste(codPJ, movi, posPJx, posPJy);
                break;
        }
        //Una vez calculadas las casillas, calculamos las rutas
        //calcularRuta("Norte", ruta2.size(), casillas, nuevaX, nuevaY, nuevocodPJ);
        
        //calculaRuta();
        
    }
    
    public void irOeste(int codigo, int casillas, int pX, int pY) {
        int nuevaX = pX-1;
        int nuevaY = pY;
        if(casillas > 0) { //Preguntamos si quedan movimientos
            jComboBox1_1.addItem((String) (nuevaX + "-" + nuevaY)); //Añadimos la casilla al combo
            
            Dark.ventanaInicio.mapaFondo.rellenaRuta(nuevaX, nuevaY); //Hacemos que la casilla en el mapa quede resaltada
            int nuevocodPJ = Constantes.mapaConCaminos[nuevaX][nuevaY]; //Añadimos el código de la nueva casilla
            int nuevasCasillas = casillas -1;
            casillasMovidas.add(movi - casillas); //Así sabemos cuantas casillas se mueven
            switch (nuevocodPJ) { //Si vamos al oeste, la casilla que podemos encontrar será código: 5-8-9-11-12-14
                case 5: //De este a Norte
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 8: //De este a sur
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 9: //De este a oeste
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 11: //De este a Norte y Sur
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 12: //De este a Oeste y sur
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 14: //De este a Oeste y Norte
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
            }
            
        } else {
            //ruta.add("--------");
        }
    }
    public void irEste(int codigo, int casillas, int pX, int pY) {
        int nuevaX = pX+1;
        int nuevaY = pY;
        if(casillas > 0) { //Preguntamos si quedan movimientos
            jComboBox1_1.addItem((String) (nuevaX + "-" + nuevaY)); //Añadimos la casilla al combo
            Dark.ventanaInicio.mapaFondo.rellenaRuta(nuevaX, nuevaY); //Hacemos que la casilla en el mapa quede resaltada
            int nuevocodPJ = Constantes.mapaConCaminos[nuevaX][nuevaY]; //Añadimos el código de la nueva casilla
            int nuevasCasillas = casillas -1;
            casillasMovidas.add(movi - casillas); //Así sabemos cuantas casillas se mueven
            switch (nuevocodPJ) { //Si vamos al este, la casilla que podemos encontrar será código: 7-9-10-12-13-14
                case 7: //De Oeste a Norte
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 9: //De Oeste a Este
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 10: //De Oeste a Sur
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 12: //De oeste a Sur y Este
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 13: //De oeste a norte y sur
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 14: //De oeste a norte y este
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
            }
            
        } else {
            //ruta.add("--------");
        }
    }
    public void irNorte(int codigo, int casillas, int pX, int pY) {
        int nuevaX = pX;
        int nuevaY = pY-1;
        if(casillas > 0) { //Preguntamos si quedan movimientos
            jComboBox1_1.addItem((String) (nuevaX + "-" + nuevaY)); //Añadimos la casilla al combo
            Dark.ventanaInicio.mapaFondo.rellenaRuta(nuevaX, nuevaY); //Hacemos que la casilla en el mapa quede resaltada
            int nuevocodPJ = Constantes.mapaConCaminos[nuevaX][nuevaY]; //Añadimos el código de la nueva casilla
            int nuevasCasillas = casillas -1;
            casillasMovidas.add(movi - casillas); //Así sabemos cuantas casillas se mueven
            switch (nuevocodPJ) { //Si vamos al norte, la casilla que podemos encontrar será código: 6-8-10-11-12-13
                case 6: //De norte a sur
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 8: //De norte a este
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 10: //De norte a oeste
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 11: //De norte a este y sur
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 12: //De norte a este y oeste
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 13: //De norte a oeste y sur
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Norte");
                    irNorte(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
            }
            
        } else {
            //rutas.add(ruta);
        }
    }
    public void irSur(int codigo, int casillas, int pX, int pY) {
        int nuevaX = pX;
        int nuevaY = pY+1;
        if(casillas > 0) { //Preguntamos si quedan movimientos
            jComboBox1_1.addItem((String) (nuevaX + "-" + nuevaY)); //Añadimos la casilla al combo
            Dark.ventanaInicio.mapaFondo.rellenaRuta(nuevaX, nuevaY); //Hacemos que la casilla en el mapa quede resaltada
            int nuevocodPJ = Constantes.mapaConCaminos[nuevaX][nuevaY]; //Añadimos el código de la nueva casilla
            int nuevasCasillas = casillas -1;
            casillasMovidas.add(movi - casillas); //Así sabemos cuantas casillas se mueven
            switch (nuevocodPJ) { //Si vamos al sur, la casilla que podemos encontrar será código: 5-6-7-11-13-14
                case 5: //De sur a este
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 6: //De sur a norte
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 7: //De sur a oeste
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 11: //De sur a este y norte
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 13: //De sur a oeste y norte
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Sur");
                    irSur(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
                case 14: //De sur a este y oeste
                    ruta.add("Oeste");
                    irOeste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    ruta.add("Este");
                    irEste(nuevocodPJ, nuevasCasillas, nuevaX, nuevaY);
                    break;
            }
            
        } else {
            //ruta.add("--------");
        }
    }
    
    public void cargarMenuEscogerEnemigo() {
        //Creamos el String con los Bandos que se cargarán de la BBDD
        String[] bandos;
        try {
            //Abrimos la conexion con la BBDD
            Dark.con.connect();
            //Cargamos los datos
            bandos = Dark.con.cargarBandos();
            //Eliminamos los datos anteriores
            jComboBox1_1.removeAllItems();
            //Cargamos el comboBox con el array de los bandos
            for(int x=0; x<bandos.length;x++) {
                jComboBox1_1.addItem(bandos[x]);
            }
            //Cerramos la conexion
            Dark.con.close();
        } catch (NullPointerException ex) {
            
        }
    }

    private void calcularRuta(String direccion, int size, int casillas, int nuevaX, int nuevaY, int nuevocodPJ) {
        /*if(nuevocodPJ == 3 &&
                nuevocodPJ == 6 ||
                nuevocodPJ == 8 ||
                nuevocodPJ == 10 ||
                nuevocodPJ == 11 ||
                nuevocodPJ == 12 ||
                nuevocodPJ == 13)*/
        System.out.println("MOVI " + movi + "CASI " + casillas);
        if(movi==casillas)
                    ruta2.add(direccion);
        System.out.println("TAMAÑO: " + size + " " + ruta2.size() + ruta2);
        if(size<casillas) {
            rutas.add(ruta2);
            ruta2.clear();
        }
    }

    private void calculaRuta() {
        //Hay tantas rutas como elementos del combo
        int elementos = jComboBox1_1.getItemCount();
        System.out.println("ELEMENTOS:" + elementos);
        //Calculamos las casillas que se ha movido el PJ
        
        
        
        System.out.println("EL PJ VA desde " + posPJx + ":" + posPJy + "HASTA " + posPJxFinal + ":" + posPJyFinal);
        System.out.println(casillasMovidas);
    }
}

